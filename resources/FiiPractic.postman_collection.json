{
	"info": {
		"_postman_id": "41513f08-f136-4395-ba17-ae77091bf924",
		"name": "FiiPractic",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24478282",
		"_collection_link": "https://orange-zodiac-182687.postman.co/workspace/onePULSE~48e64d8c-df9e-4436-8275-9715db8ef0af/collection/24478282-41513f08-f136-4395-ba17-ae77091bf924?action=share&source=collection_link&creator=24478282"
	},
	"item": [
		{
			"name": "administrator",
			"item": [
				{
					"name": "equipments",
					"item": [
						{
							"name": "types",
							"item": [
								{
									"name": "create",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"eqType3\",\r\n    \"description\": \"eqType3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/equipments/types",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"equipments",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "search",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sortBy\": \"desc:name\",\r\n    \"offset\": 0,\r\n    \"limit\": 100,\r\n    \"filter\": {\r\n        \"outerOperator\": \"and\",\r\n        \"criteria\": [\r\n            {\r\n                \"propertyName\": \"name\",\r\n                \"operator\": \"eq\",\r\n                \"values\": [\"eqType1\"]\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/equipments/types/search",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"equipments",
												"types",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "update",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"eqType1\",\r\n    \"uuid\": \"be6217c4-06c2-4b54-bb0b-c3f6bcf67f43\",\r\n    \"description\": \"eqType1-up2\",\r\n    \"version\": 2,\r\n    \"updated\": \"2025-04-07T15:27:17.0791308+03:00\",\r\n    \"updatedBy\": \"system\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/equipments/types",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"equipments",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete",
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"toolType\": \"TOOL\",\r\n    \"name\": \"tool1\",\r\n    \"alias\": \"T1\",\r\n    \"description\": \"tool 1 description\",\r\n    \"division\": \"No Division\",\r\n    \"active\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/equipments/types?uuid=f36569af-98b5-4db8-a9a7-bc6a0f02ad59&version=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"equipments",
												"types"
											],
											"query": [
												{
													"key": "uuid",
													"value": "f36569af-98b5-4db8-a9a7-bc6a0f02ad59"
												},
												{
													"key": "version",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "tools",
							"item": [
								{
									"name": "create",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"tool2\",\r\n    \"equipmentTypeIdentity\": {\r\n        \"name\": \"eqType1\",\r\n        \"uuid\": \"be6217c4-06c2-4b54-bb0b-c3f6bcf67f43\"\r\n    },\r\n    \"alias\": \"T1\",\r\n    \"description\": \"tool 1 description\",\r\n    \"active\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/equipments/tools",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"equipments",
												"tools"
											]
										}
									},
									"response": []
								},
								{
									"name": "search",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/equipments/tools/search",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"equipments",
												"tools",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "update",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"name\": \"tool1\",\r\n        \"equipmentTypeIdentity\": {\r\n            \"uuid\": \"e07359e9-acb0-4daa-bc0f-5f949ced2ff7\",\r\n            \"name\": \"eqType1\"\r\n        },\r\n        \"active\": true,\r\n        \"uuid\": \"0b2c5366-f77c-4cee-bd51-9e9c646035ac\",\r\n        \"description\": \"tool 1 description - up\",\r\n        \"version\": 1,\r\n        \"updated\": \"2025-03-25T10:06:01+02:00\",\r\n        \"updatedBy\": \"system\",\r\n        \"alias\": \"T1\"\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/equipments/tools",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"equipments",
												"tools"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete",
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"toolType\": \"TOOL\",\r\n    \"name\": \"tool1\",\r\n    \"alias\": \"T1\",\r\n    \"description\": \"tool 1 description\",\r\n    \"division\": \"No Division\",\r\n    \"active\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/equipments/tools?id=407a538f-e7b2-47f8-be1f-81d44a54e0a8&version=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"equipments",
												"tools"
											],
											"query": [
												{
													"key": "id",
													"value": "407a538f-e7b2-47f8-be1f-81d44a54e0a8"
												},
												{
													"key": "version",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "materials",
					"item": [
						{
							"name": "createMaterial",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"test\",\r\n    \"description\": \"test material\",\r\n    \"availableQuantity\": 1000,\r\n    \"quantityUnit\": \"pieces\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/administrator/materials",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"administrator",
										"materials"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "processPlan",
					"item": [
						{
							"name": "searchByOrder",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sortBy\": \"desc:name\",\r\n    \"offset\": 0,\r\n    \"limit\": 100,\r\n    \"filter\": {\r\n        \"outerOperator\": \"and\",\r\n        \"criteria\": [\r\n            {\r\n                \"propertyName\": \"orderUuid\",\r\n                \"operator\": \"eq\",\r\n                \"values\": [\"e506e9b4-a50c-4ebb-809b-55a0a3b69380\"]\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/administrator/processes/plans/search",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"administrator",
										"processes",
										"plans",
										"search"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "processStep",
					"item": [
						{
							"name": "searchByOrder",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sortBy\": \"desc:name\",\r\n    \"offset\": 0,\r\n    \"limit\": 100,\r\n    \"filter\": {\r\n        \"outerOperator\": \"and\",\r\n        \"criteria\": [\r\n            {\r\n                \"propertyName\": \"orderUuid\",\r\n                \"operator\": \"in\",\r\n                \"values\": [\"e506e9b4-a50c-4ebb-809b-55a0a3b69380\"]\r\n            },\r\n            {\r\n                \"propertyName\": \"withEquipment\",\r\n                \"operator\": \"in\",\r\n                \"values\": [\"996f462f-e338-4937-aff5-77eae531f639\"]\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/administrator/processes/steps/search",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"administrator",
										"processes",
										"steps",
										"search"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "orders",
					"item": [
						{
							"name": "search",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/administrator/orders/search",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"administrator",
										"orders",
										"search"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "demo-steps",
					"item": [
						{
							"name": "createEqTypes",
							"item": [
								{
									"name": "createEqType-implanter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('eqType.implanter.uuid', jsonData.uuid);\r",
													"    pm.environment.set('eqType.implanter.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"implanter\",\r\n    \"description\": \"Equipment type: Implanter\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/equipments/types",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"equipments",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "createEqType-transport",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('eqType.transport.uuid', jsonData.uuid);\r",
													"    pm.environment.set('eqType.transport.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"transport\",\r\n    \"description\": \"Equipment type: Transport\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/equipments/types",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"equipments",
												"types"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "createEquipment",
							"item": [
								{
									"name": "implanters",
									"item": [
										{
											"name": "createTool-implanter1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.environment.set('tool.implanter1.uuid', jsonData.uuid);\r",
															"    pm.environment.set('tool.implanter1.name', jsonData.name);\r",
															"} else {\r",
															"    throw new Error(\"unexpected status\")\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Implanter1\",\r\n    \"equipmentTypeIdentity\": {\r\n        \"name\": \"{{eqType.implanter.name}}\",\r\n        \"uuid\": \"{{eqType.implanter.uuid}}\"\r\n    },\r\n    \"alias\": \"Imp1\",\r\n    \"active\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:5000/administrator/equipments/tools",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "5000",
													"path": [
														"administrator",
														"equipments",
														"tools"
													]
												}
											},
											"response": []
										},
										{
											"name": "createTool-implanter2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.environment.set('tool.implanter2.uuid', jsonData.uuid);\r",
															"    pm.environment.set('tool.implanter2.name', jsonData.name);\r",
															"} else {\r",
															"    throw new Error(\"unexpected status\")\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Implanter2\",\r\n    \"equipmentTypeIdentity\": {\r\n        \"name\": \"{{eqType.implanter.name}}\",\r\n        \"uuid\": \"{{eqType.implanter.uuid}}\"\r\n    },\r\n    \"alias\": \"Imp2\",\r\n    \"active\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:5000/administrator/equipments/tools",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "5000",
													"path": [
														"administrator",
														"equipments",
														"tools"
													]
												}
											},
											"response": []
										},
										{
											"name": "createTool-implanter3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.environment.set('tool.implanter3.uuid', jsonData.uuid);\r",
															"    pm.environment.set('tool.implanter3.name', jsonData.name);\r",
															"} else {\r",
															"    throw new Error(\"unexpected status\")\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Implanter3\",\r\n    \"equipmentTypeIdentity\": {\r\n        \"name\": \"{{eqType.implanter.name}}\",\r\n        \"uuid\": \"{{eqType.implanter.uuid}}\"\r\n    },\r\n    \"alias\": \"Imp3\",\r\n    \"active\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:5000/administrator/equipments/tools",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "5000",
													"path": [
														"administrator",
														"equipments",
														"tools"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "transport",
									"item": [
										{
											"name": "createTool-band1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.environment.set('tool.band1.uuid', jsonData.uuid);\r",
															"    pm.environment.set('tool.band1.name', jsonData.name);\r",
															"} else {\r",
															"    throw new Error(\"unexpected status\")\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Band1\",\r\n    \"equipmentTypeIdentity\": {\r\n        \"name\": \"{{eqType.transport.name}}\",\r\n        \"uuid\": \"{{eqType.transport.uuid}}\"\r\n    },\r\n    \"active\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:5000/administrator/equipments/tools",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "5000",
													"path": [
														"administrator",
														"equipments",
														"tools"
													]
												}
											},
											"response": []
										},
										{
											"name": "createTool-band2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.environment.set('tool.band2.uuid', jsonData.uuid);\r",
															"    pm.environment.set('tool.band2.name', jsonData.name);\r",
															"} else {\r",
															"    throw new Error(\"unexpected status\")\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Band2\",\r\n    \"equipmentTypeIdentity\": {\r\n        \"name\": \"{{eqType.transport.name}}\",\r\n        \"uuid\": \"{{eqType.transport.uuid}}\"\r\n    },\r\n    \"active\": \"true\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:5000/administrator/equipments/tools",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "5000",
													"path": [
														"administrator",
														"equipments",
														"tools"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "materials",
							"item": [
								{
									"name": "craeteMaterial-board1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('material.board1.uuid', jsonData.uuid);\r",
													"    pm.environment.set('material.board1.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"board1\",\r\n    \"description\": \"this is an empty board\",\r\n    \"availableQuantity\": 1000,\r\n    \"quantityUnit\": \"pieces\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/materials",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"materials"
											]
										}
									},
									"response": []
								},
								{
									"name": "craeteMaterial-board2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('material.board2.uuid', jsonData.uuid);\r",
													"    pm.environment.set('material.board2.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"board2\",\r\n    \"description\": \"this is an empty board with one resistance\",\r\n    \"availableQuantity\": 0,\r\n    \"quantityUnit\": \"pieces\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/materials",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"materials"
											]
										}
									},
									"response": []
								},
								{
									"name": "craeteMaterial-board3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('material.board3.uuid', jsonData.uuid);\r",
													"    pm.environment.set('material.board3.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"board3\",\r\n    \"description\": \"this is an empty board with 2 resistances\",\r\n    \"availableQuantity\": 0,\r\n    \"quantityUnit\": \"pieces\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/materials",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"materials"
											]
										}
									},
									"response": []
								},
								{
									"name": "craeteMaterial-board4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('material.board4.uuid', jsonData.uuid);\r",
													"    pm.environment.set('material.board4.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"board4\",\r\n    \"description\": \"this is an empty board with 3 resistances\",\r\n    \"availableQuantity\": 0,\r\n    \"quantityUnit\": \"pieces\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/materials",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"materials"
											]
										}
									},
									"response": []
								},
								{
									"name": "craeteMaterial-brokenBoard",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('material.brokenBoard.uuid', jsonData.uuid);\r",
													"    pm.environment.set('material.brokenBoard.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"brokenBoard\",\r\n    \"description\": \"this is an brokenBoard which can not be used in a feature step\",\r\n    \"availableQuantity\": 0,\r\n    \"quantityUnit\": \"pieces\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/materials",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"materials"
											]
										}
									},
									"response": []
								},
								{
									"name": "craeteMaterial-resistance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('material.resistance.uuid', jsonData.uuid);\r",
													"    pm.environment.set('material.resistance.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"resistance\",\r\n    \"description\": \"this is a rezistence\",\r\n    \"availableQuantity\": 0,\r\n    \"quantityUnit\": \"pieces\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/materials",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"materials"
											]
										}
									},
									"response": []
								},
								{
									"name": "craeteMaterial-solderPaste",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('material.solderPaste.uuid', jsonData.uuid);\r",
													"    pm.environment.set('material.solderPaste.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"solder paste\",\r\n    \"description\": \"this is solder paste used to mount a rezistence on a board\",\r\n    \"availableQuantity\": 5000000,\r\n    \"quantityUnit\": \"qg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/materials",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"materials"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "processStep",
							"item": [
								{
									"name": "createPS-step1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('ps.step1.uuid', jsonData.uuid);\r",
													"    pm.environment.set('ps.step1.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"step1\",\r\n    \"description\": \"material.board1+material.resistance+material.solderPaste-->tool.implanter1-ok-->material.board2 -nok-> material.brokenBoard\",\r\n    \"inputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.board1.name}}\",\r\n            \"uuid\": \"{{material.board1.uuid}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"name\": \"{{material.resistance.name}}\",\r\n            \"uuid\": \"{{material.resistance.uuid}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"name\": \"{{material.solderPaste.name}}\",\r\n            \"uuid\": \"{{material.solderPaste.uuid}}\",\r\n            \"quantity\": 8\r\n        }\r\n    ],\r\n    \"equipments\": [\r\n        {\r\n            \"name\": \"{{tool.implanter1.name}}\",\r\n            \"uuid\": \"{{tool.implanter1.uuid}}\"\r\n        }\r\n    ],\r\n    \"successOutputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.board2.name}}\",\r\n            \"uuid\": \"{{material.board2.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"failOutputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.brokenBoard.name}}\",\r\n            \"uuid\": \"{{material.brokenBoard.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/processes/steps",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"processes",
												"steps"
											]
										}
									},
									"response": []
								},
								{
									"name": "createPS-step2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('ps.step2.uuid', jsonData.uuid);\r",
													"    pm.environment.set('ps.step2.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"step2\",\r\n    \"description\": \"material.board2-->tool.band1-ok-->material.board2 -nok-> material.brokenBoard\",\r\n    \"inputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.board2.name}}\",\r\n            \"uuid\": \"{{material.board2.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"equipments\": [\r\n        {\r\n            \"name\": \"{{tool.band1.name}}\",\r\n            \"uuid\": \"{{tool.band1.uuid}}\"\r\n        }\r\n    ],\r\n    \"successOutputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.board2.name}}\",\r\n            \"uuid\": \"{{material.board2.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"failOutputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.brokenBoard.name}}\",\r\n            \"uuid\": \"{{material.brokenBoard.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/processes/steps",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"processes",
												"steps"
											]
										}
									},
									"response": []
								},
								{
									"name": "createPS-step3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('ps.step3.uuid', jsonData.uuid);\r",
													"    pm.environment.set('ps.step3.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"step3\",\r\n    \"description\": \"material.board2+material.resistance+material.solderPaste-->tool.implanter1-ok-->material.board3 -nok-> material.brokenBoard\",\r\n    \"inputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.board2.name}}\",\r\n            \"uuid\": \"{{material.board2.uuid}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"name\": \"{{material.resistance.name}}\",\r\n            \"uuid\": \"{{material.resistance.uuid}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"name\": \"{{material.solderPaste.name}}\",\r\n            \"uuid\": \"{{material.solderPaste.uuid}}\",\r\n            \"quantity\": 8\r\n        }\r\n    ],\r\n    \"equipments\": [\r\n        {\r\n            \"name\": \"{{tool.implanter2.name}}\",\r\n            \"uuid\": \"{{tool.implanter2.uuid}}\"\r\n        }\r\n    ],\r\n    \"successOutputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.board3.name}}\",\r\n            \"uuid\": \"{{material.board3.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"failOutputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.brokenBoard.name}}\",\r\n            \"uuid\": \"{{material.brokenBoard.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/processes/steps",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"processes",
												"steps"
											]
										}
									},
									"response": []
								},
								{
									"name": "createPS-step4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('ps.step4.uuid', jsonData.uuid);\r",
													"    pm.environment.set('ps.step4.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"step4\",\r\n    \"description\": \"material.board3-->tool.band1-ok-->material.board3 -nok-> material.brokenBoard\",\r\n    \"inputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.board3.name}}\",\r\n            \"uuid\": \"{{material.board3.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"equipments\": [\r\n        {\r\n            \"name\": \"{{tool.band2.name}}\",\r\n            \"uuid\": \"{{tool.band2.uuid}}\"\r\n        }\r\n    ],\r\n    \"successOutputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.board3.name}}\",\r\n            \"uuid\": \"{{material.board3.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"failOutputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.brokenBoard.name}}\",\r\n            \"uuid\": \"{{material.brokenBoard.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/processes/steps",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"processes",
												"steps"
											]
										}
									},
									"response": []
								},
								{
									"name": "createPS-step5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('ps.step5.uuid', jsonData.uuid);\r",
													"    pm.environment.set('ps.step5.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"step5\",\r\n    \"description\": \"material.board3+material.resistance+material.solderPaste-->tool.implanter1-ok-->material.board4 -nok-> material.brokenBoard\",\r\n    \"inputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.board3.name}}\",\r\n            \"uuid\": \"{{material.board3.uuid}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"name\": \"{{material.resistance.name}}\",\r\n            \"uuid\": \"{{material.resistance.uuid}}\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"name\": \"{{material.solderPaste.name}}\",\r\n            \"uuid\": \"{{material.solderPaste.uuid}}\",\r\n            \"quantity\": 8\r\n        }\r\n    ],\r\n    \"equipments\": [\r\n        {\r\n            \"name\": \"{{tool.implanter3.name}}\",\r\n            \"uuid\": \"{{tool.implanter3.uuid}}\"\r\n        }\r\n    ],\r\n    \"successOutputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.board4.name}}\",\r\n            \"uuid\": \"{{material.board4.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"failOutputMaterials\": [\r\n        {\r\n            \"name\": \"{{material.brokenBoard.name}}\",\r\n            \"uuid\": \"{{material.brokenBoard.uuid}}\",\r\n            \"quantity\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/processes/steps",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"processes",
												"steps"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "processPlan",
							"item": [
								{
									"name": "createPP-plan1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('pplan.plan1.uuid', jsonData.uuid);\r",
													"    pm.environment.set('pplan.plan1.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"pplan1\",\r\n    \"description\": \"pstep.step1 -> pstep.step2 -> pstep.step3\",\r\n    \"orderedProcessSteps\": [\r\n        {\r\n            \"name\": \"{{ps.step1.name}}\",\r\n            \"uuid\": \"{{ps.step1.uuid}}\",\r\n            \"orderInProcess\": 1\r\n        },\r\n        {\r\n            \"name\": \"{{ps.step2.name}}\",\r\n            \"uuid\": \"{{ps.step2.uuid}}\",\r\n            \"orderInProcess\": 2\r\n        },\r\n        {\r\n            \"name\": \"{{ps.step3.name}}\",\r\n            \"uuid\": \"{{ps.step3.uuid}}\",\r\n            \"orderInProcess\": 3\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/processes/plans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"processes",
												"plans"
											]
										}
									},
									"response": []
								},
								{
									"name": "createPP-plan2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('pplan.plan2.uuid', jsonData.uuid);\r",
													"    pm.environment.set('pplan.plan2.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"pplan2\",\r\n    \"description\": \"pstep.step1 -> pstep.step2 -> pstep.step3 -> pstep.step4 -> pstep.step5\",\r\n    \"orderedProcessSteps\": [\r\n        {\r\n            \"name\": \"{{ps.step1.name}}\",\r\n            \"uuid\": \"{{ps.step1.uuid}}\",\r\n            \"orderInProcess\": 1\r\n        },\r\n        {\r\n            \"name\": \"{{ps.step2.name}}\",\r\n            \"uuid\": \"{{ps.step2.uuid}}\",\r\n            \"orderInProcess\": 2\r\n        },\r\n        {\r\n            \"name\": \"{{ps.step3.name}}\",\r\n            \"uuid\": \"{{ps.step3.uuid}}\",\r\n            \"orderInProcess\": 3\r\n        },\r\n        {\r\n            \"name\": \"{{ps.step4.name}}\",\r\n            \"uuid\": \"{{ps.step4.uuid}}\",\r\n            \"orderInProcess\": 4\r\n        },\r\n        {\r\n            \"name\": \"{{ps.step5.name}}\",\r\n            \"uuid\": \"{{ps.step5.uuid}}\",\r\n            \"orderInProcess\": 5\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/processes/plans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"processes",
												"plans"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "order",
							"item": [
								{
									"name": "createOrder-o1Boards3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('order.o1Boards3.uuid', jsonData.uuid);\r",
													"    pm.environment.set('order.o1Boards3.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"o1Boards3\",\r\n    \"description\": \"500 * board3\",\r\n    \"process\": {\r\n        \"name\": \"{{pplan.plan1.name}}\",\r\n        \"uuid\": \"{{pplan.plan1.uuid}}\"\r\n    },\r\n    \"quantity\": 500\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/orders",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "createOrder-o2Boards3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('order.o2Boards3.uuid', jsonData.uuid);\r",
													"    pm.environment.set('order.o2Boards3.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"o2Boards3\",\r\n    \"description\": \"250 * board3\",\r\n    \"process\": {\r\n        \"name\": \"{{pplan.plan1.name}}\",\r\n        \"uuid\": \"{{pplan.plan1.uuid}}\"\r\n    },\r\n    \"quantity\": 250\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/orders",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "createOrder-o1Boards4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set('order.o1Boards3.uuid', jsonData.uuid);\r",
													"    pm.environment.set('order.o1Boards3.name', jsonData.name);\r",
													"} else {\r",
													"    throw new Error(\"unexpected status\")\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"o1Boards4\",\r\n    \"description\": \"100 * board4\",\r\n    \"process\": {\r\n        \"name\": \"{{pplan.plan2.name}}\",\r\n        \"uuid\": \"{{pplan.plan2.uuid}}\"\r\n    },\r\n    \"quantity\": 100\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/administrator/orders",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"administrator",
												"orders"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "metrics",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "http://localhost:5000/q/metrics",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"q",
								"metrics"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "wip",
			"item": [
				{
					"name": "orderStatus",
					"item": [
						{
							"name": "changeOrderStatus",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:6000/workInProgress/orders/afb4cd95-9ff3-48be-a76c-6acd2dc801b0/status/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6000",
									"path": [
										"workInProgress",
										"orders",
										"afb4cd95-9ff3-48be-a76c-6acd2dc801b0",
										"status",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrderStatusByOrderName",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:6000/workInProgress/orders/o1Boards3/status",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6000",
									"path": [
										"workInProgress",
										"orders",
										"o1Boards3",
										"status"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "metrics",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "http://localhost:6000/q/metrics",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6000",
							"path": [
								"q",
								"metrics"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}