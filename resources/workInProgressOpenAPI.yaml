openapi: 3.0.3
info:
  title: MES - WorkInProgress
  version: 1.0.0
servers:
  - url: "http://{appHost}:{appPort}"
    variables:
      appHost:
        default: 127.0.0.1
      appPort:
        default: "6000"

paths:
  /workInProgress/orders/{orderId}/status/{newOrderStatus}:
    post:
      tags:
        - Order
      operationId: changeOrderStatus
      summary: "Change the status of one job."
      description: "Statuses legend: <br />
       ON_HOLD - this is default status of all jobs. No one can change job status on this. <br />
       STARTED - plant start to work at this job. This status can be set if job have one of the statuses: ON_HOLD, PAUSED <br />
       PAUSED - plant pause work on this job. This status can be set if job have status: STARTED <br /> 
       COMPLETED - job completed, no more work on this job requested; This status can be set if job have status: STARTED <br /> 
      "
      parameters:
        - in: path
          name: orderId
          schema:
            $ref: '#/components/schemas/uuidType'
          required: true
          description: Order id
        - in: path
          name: newOrderStatus
          schema:
            $ref: '#/components/schemas/orderStatusType'
          required: true
          description: new order status
      responses:
        "200":
          description: OK - Order status was changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusDTO'
        "400":
          description: FAIL - Order status can not be changed (job can not achieve new status because of current one)
        "404":
          description: FAIL - Order not found
        "500":
          description: FAIL - Server internal error (all other exceptions)
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
        - tag: Order
  /workInProgress/orders/{name}/status:
    get:
      tags:
        - Order
      operationId: getOrderStatusByName
      summary: "Get order status information by order name"
      parameters:
        - in: path
          name: name
          schema:
            $ref: '#/components/schemas/nameType'
          required: true
          description: Name of the order to fetch its status
      responses:
        "200":
          description: OK - OrderStatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusDTO'
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
        - tag: Order

  /workInProgress/equipment/status/check:
    post:
      tags:
        - Equipment
      operationId: checkChangeEqStatus
      summary: "Check if the equipment status can be changed."
      description: "<b>Input statuses legend:</b> <br />
        STOP - set equipment in state: STOPPED; Previous equipment should be in: ON_REPAIR or WAIT_FOR_MATERIALS state; <br />
        ON_REPAIR - set equipment in state: ON_REPAIR; Previous equipment should be in: WAIT_FOR_MATERIALS state; <br />
        START - set equipment in state: WAIT_FOR_MATERIALS; Previous equipment should be in: STOPPED state; <br />
        PROCESS_START - set equipment in state: PROCESSING; Previous equipment should be in: WAIT_FOR_MATERIALS state; <br />
        PROCESS_SUCCEED - set equipment in state: WAIT_FOR_MATERIALS; Previous equipment should be in: PROCESSING state; <br />
        PROCESS_FAIL - set equipment in state: WAIT_FOR_MATERIALS; Previous equipment should be in: PROCESSING state; <br />
      <b>Flow:</b>
        check if equipment is part of an active order <br />
        check if equipment status is in previous equipment status list. <br /> 
        if <i>inputStatus</i> = PROCESS_START then check existence of requested input material inside of process step"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEquipmentStatusRequest'
        required: true
      responses:
        "201":
          description: OK - Order status can be changed
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
        - tag: Equipment
  /workInProgress/equipment/status:
    post:
      tags:
        - Equipment
      operationId: changeEqStatus
      summary: "Check if the equipment status can be changed."
      description: "<b>Input statuses legend:</b> <br />
        STOP - set equipment in state: STOPPED; Previous equipment should be in: ON_REPAIR or WAIT_FOR_MATERIALS state; <br />
        ON_REPAIR - set equipment in state: ON_REPAIR; Previous equipment should be in: WAIT_FOR_MATERIALS state; <br />
        START - set equipment in state: WAIT_FOR_MATERIALS; Previous equipment should be in: STOPPED state; <br />
        PROCESS_START - set equipment in state: PROCESSING; Previous equipment should be in: WAIT_FOR_MATERIALS state; <br />
        PROCESS_SUCCEED - set equipment in state: WAIT_FOR_MATERIALS; Previous equipment should be in: PROCESSING state; <br />
        PROCESS_FAIL - set equipment in state: WAIT_FOR_MATERIALS; Previous equipment should be in: PROCESSING state; <br />
      <b>Flow:</b>
        check if equipment is part of an active order <br />
        check if equipment status is in previous equipment status list <br /> 
        if <i>inputStatus</i> = PROCESS_START then { <br />
          check existence of requested input material inside of process step; <br />
          update material quantities <br />  
        } <br />
        if <i>inputStatus</i> = PROCESS_SUCCEED || PROCESS_FAIL then { <br />
          update material quantities <br />  
        } <br />
        update equipment status as described previously <br />
        "
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEquipmentStatusRequest'
        required: true
      responses:
        "200":
          description: OK - Order status was changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEquipmentStatusResponse'
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
        - tag: Equipment

  /workInProgress/statistics/time/orders/{orderId}:
    post:
      tags:
        - TimeStatistics
      operationId: createOrderTimeStatistics
      summary: "Calculate time statistics for an order"
      description: "<b>Flow</b><br />
        - select order
        - check over order statuses and create statistic by states: ON_HOLD, STARTED, PAUSED, COMPLETED"
      parameters:
        - in: path
          name: orderId
          schema:
            $ref: '#/components/schemas/uuidType'
          required: true
          description: Order id
      responses:
        "200":
          description: OK - Get TimeStatisticDTO for order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeStatisticDTO'
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
        - tag: TimeStatistics
  /workInProgress/statistics/time/equipment/{equipmentId}:
    post:
      tags:
        - TimeStatistics
      operationId: createEquipmentTimeStatistics
      summary: "Calculate time statistics for an order"
      description: "<b>Flow</b><br />
        - select order
        - check over order statuses and create statistic by states: STOPPED, ON_REPAIR, WAIT_FOR_MATERIALS, PROCESSING"
      parameters:
        - in: path
          name: equipmentId
          schema:
            $ref: '#/components/schemas/uuidType'
          required: true
          description: Equipment id
      responses:
        "200":
          description: OK - Get TimeStatisticDTO for equipment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeStatisticDTO'
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
        - tag: TimeStatistics

components:
  schemas:
    nameType:
      minLength: 1
      type: string
    uuidType:
      maxLength: 36
      minLength: 1
      type: string
    updatedType:
      type: string
      readOnly: true
      format: date-time
      description: e.g. 2017-07-21T17:32:28Z
    orderStatusType:
      type: string
      enum: [ON_HOLD, STARTED, PAUSED, COMPLETED]
    inputEqStatusType:
      type: string
      enum: [STOP, ON_REPAIR, START, PROCESS_START, PROCESS_SUCCEED, PROCESS_FAIL]
    eqStatusType:
      type: string
      enum: [STOPPED, ON_REPAIR, WAIT_FOR_MATERIALS, PROCESSING]

    IdentityDTO:
      type: object
      required:
        - uuid
        - name
      properties:
        uuid:
          $ref: '#/components/schemas/uuidType'
        name:
          $ref: '#/components/schemas/nameType'

    OrderStatusDTO:
      type: object
      required:
        - identity
        - status
      properties:
        identity:
          $ref: '#/components/schemas/IdentityDTO'
        status:
          $ref: '#/components/schemas/orderStatusType'
        lastChange:
          $ref: '#/components/schemas/updatedType'

    UpdateEquipmentStatusRequest:
      type: object
      required:
        - equipment
        - inputStatus
      properties:
        equipment:
          $ref: '#/components/schemas/IdentityDTO'
        inputStatus:
          $ref: '#/components/schemas/inputEqStatusType'

    UpdateEquipmentStatusResponse:
      type: object
      required:
        - order
        - equipment
        - equipmentStatus
      properties:
        identity:
          $ref: '#/components/schemas/IdentityDTO'
        equipment:
          $ref: '#/components/schemas/IdentityDTO'
        equipmentStatus:
          $ref: '#/components/schemas/eqStatusType'
        lastChange:
          $ref: '#/components/schemas/updatedType'

    StatusTimeStatisticDTO:
      type: object
      properties:
        status:
          type: string
          readOnly: true
        totalTime:
          type: integer
          minimum: 0
          readOnly: true
        longestPeriod:
          type: integer
          minimum: 0
          readOnly: true
        shortestPeriod:
          type: integer
          minimum: 0
          readOnly: true

    TimeStatisticDTO:
      type: object
      properties:
        interrogationItem:
          $ref: '#/components/schemas/IdentityDTO'
          readOnly: true
        timeStatistics:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/StatusTimeStatisticDTO'

    FilterParamType:
      example:
        outerOperator: and
        criteria:
          - propertyName: propertyName
            values:
              - values
              - values
            operator: eq
          - propertyName: propertyName
            values:
              - values
              - values
            operator: eq
        criteriaGroups:
          - outerOperator: and
            criteria:
              - propertyName: propertyName
                values:
                  - values
                  - values
                operator: eq
              - propertyName: propertyName
                values:
                  - values
                  - values
                operator: eq
            criteriaGroups:
              - null
              - null
          - outerOperator: and
            criteria:
              - propertyName: propertyName
                values:
                  - values
                  - values
                operator: eq
              - propertyName: propertyName
                values:
                  - values
                  - values
                operator: eq
            criteriaGroups:
              - null
              - null
      properties:
        outerOperator:
          default: and
          enum:
            - and
            - or
          type: string
        criteriaGroups:
          items:
            $ref: '#/components/schemas/FilterParamCriteriaGroupType'
          type: array
        criteria:
          items:
            $ref: '#/components/schemas/FilterParamCriteriaType'
          type: array
      type: object
    FilterParamCriteriaGroupType:
      example:
        outerOperator: and
        criteria:
          - propertyName: propertyName
            values:
              - values
              - values
            operator: eq
          - propertyName: propertyName
            values:
              - values
              - values
            operator: eq
        criteriaGroups:
          - null
          - null
      properties:
        outerOperator:
          default: and
          enum:
            - and
            - or
          type: string
        criteria:
          items:
            $ref: '#/components/schemas/FilterParamCriteriaType'
          type: array
        criteriaGroups:
          items:
            $ref: '#/components/schemas/FilterParamCriteriaGroupType'
          type: array
      required:
        - criteria
      type: object
    FilterParamCriteriaType:
      example:
        propertyName: propertyName
        values:
          - values
          - values
        operator: eq
      properties:
        propertyName:
          type: string
        operator:
          enum:
            - eq
            - ne
            - like
            - not_like
            - lt
            - le
            - gt
            - ge
            - is_null
            - is_not_null
            - in
            - not_in
          type: string
        values:
          items:
            type: string
          type: array
      required:
        - operator
        - propertyName
      type: object
    SortByType:
      description: "Comma separated list with property names to sort, e.g. \"sort-by=asc:name,desc:updated\"\
        ."
      type: string
    PagingOffsetType:
      default: 0
      description: Number of items to skip before returning the results.
      format: int32
      minimum: 0
      type: integer
    PagingLimitType:
      default: 1000000
      description: Maximum number of items to return. Limit value 0 will disable paging
        and all items are returned.
      format: int32
      minimum: 0
      type: integer
    SearchType:
      example:
        filter:
          outerOperator: and
          criteria:
            - propertyName: propertyName
              values:
                - values
                - values
              operator: eq
            - propertyName: propertyName
              values:
                - values
                - values
              operator: eq
          criteriaGroups:
            - outerOperator: and
              criteria:
                - propertyName: propertyName
                  values:
                    - values
                    - values
                  operator: eq
                - propertyName: propertyName
                  values:
                    - values
                    - values
                  operator: eq
              criteriaGroups:
                - null
                - null
            - outerOperator: and
              criteria:
                - propertyName: propertyName
                  values:
                    - values
                    - values
                  operator: eq
                - propertyName: propertyName
                  values:
                    - values
                    - values
                  operator: eq
              criteriaGroups:
                - null
                - null
        offset: 0
        limit: 0
        sortBy: sortBy
      properties:
        sortBy:
          description: "Comma separated list with property names to sort, e.g. \"\
            sort-by=asc:name,desc:updated\"."
          type: string
        offset:
          default: 0
          description: Number of items to skip before returning the results.
          format: int32
          minimum: 0
          type: integer
        limit:
          default: 1000000
          description: Maximum number of items to return. Limit value 0 will disable
            paging and all items are returned.
          format: int32
          minimum: 0
          type: integer
        filter:
          $ref: '#/components/schemas/FilterParamType'
      type: object